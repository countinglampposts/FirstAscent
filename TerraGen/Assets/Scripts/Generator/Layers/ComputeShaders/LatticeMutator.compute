int lattice_GridSize;
float lattice_GridWorldSize;
StructuredBuffer<float2> lattice_Points;

int LatticeGridPointToIndex(int x, int y)
{
    return x + y * lattice_GridSize;
}

float2 ApplyLattice(float2 pos)
{
    // Determine where it would be on the grid
    // -right->
    // a--p1--b ^
    // |   |  | |
    // |   x  | up
    // |   |  | |
    // c--p2--d |
    float gridInterval = lattice_GridWorldSize / lattice_GridSize;

    int upY    = ceil(pos.y / gridInterval);
    int downY  = floor(pos.y / gridInterval);
    int leftX  = floor(pos.x / gridInterval);
    int rightX = ceil(pos.x / gridInterval);

    float xLerp = (pos.x - leftX * gridInterval) / gridInterval;
    float yLerp = (pos.y - downY * gridInterval) / gridInterval;

    // Determine where it is now on the grid
    int aIndex = LatticeGridPointToIndex(leftX, upY);
    int bIndex = LatticeGridPointToIndex(rightX, upY);
    int cIndex = LatticeGridPointToIndex(leftX, downY);
    int dIndex = LatticeGridPointToIndex(rightX, downY);

    //Determine if it is on the grid
    /*if (aIndex < 0 || aIndex >= lattice_Points.Length)
        return pos;
    if (bIndex < 0 || bIndex >= lattice_Points.Length)
        return pos;
    if (cIndex < 0 || cIndex >= lattice_Points.Length)
        return pos;
    if (dIndex < 0 || dIndex >= lattice_Points.Length)
        return pos;*/

    float2 p1 = lerp(lattice_Points[aIndex], lattice_Points[bIndex], xLerp);
    float2 p2 = lerp(lattice_Points[cIndex], lattice_Points[dIndex], xLerp);
    float2 returned = lerp(p2, p1, yLerp);

    return returned;
}

float2 LatticeMutate (float2 pos)
{
    return ApplyLattice(pos);
}